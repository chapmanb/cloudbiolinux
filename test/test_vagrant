#! /usr/bin/ruby
#
# Integration testing of BioLinux targets - see
#
#   ./test/test_vagrant --help
#   ./test/test_vagrant --list
#

require 'rubygems'

# Available testing targets - this could be read from a YAML file.
BOX = {
        'Minimal' =>
           { :url         => 'http://bio4.dnsalias.net/download/biolinux/biolinux-minimal-0.91.box',
             :md5         => '64cdea1f76028971e53e2cd2f19a490a',
             :fabricrc    => 'contrib/minimal/fabricrc_debian.txt',
             :packagelist => 'contrib/minimal/main.yaml'
           },
        'Boinc' =>  # Boinc is a Minimal flavor for running Boinc clients
           { :url         => 'http://bio4.dnsalias.net/download/biolinux/biolinux-minimal-0.91.box',
             :md5         => '64cdea1f76028971e53e2cd2f19a490a',
             :fabricrc    => 'contrib/flavor/boinc/fabricrc_debian.txt',
             :packagelist => 'contrib/flavor/boinc/main.yaml'
           },
        'Phylogeny' =>  # Phylogeny is a Minimal flavor for running Phylogenetic software in the Cloud
           { :url         => 'http://bio4.dnsalias.net/download/biolinux/biolinux-phylogeny-0.91.box',
             :md5         => 'c86bd85064b397cc9b4412be0e011044',
             :fabricrc    => 'contrib/flavor/phylogeny/fabricrc_debian.txt',
             :packagelist => 'contrib/flavor/phylogeny/main.yaml',
             :call_test   => 'test_phylogeny_flavor'
           },
        'BioNode' =>
           { :url         => 'http://bio4.dnsalias.net/download/biolinux/biolinux-minimal-0.91.box',
             :md5         => '64cdea1f76028971e53e2cd2f19a490a',
             :fabricrc    => 'contrib/bionode/fabricrc_bionode.txt',
             :packagelist => 'contrib/bionode/main.yaml'
           },
}

print "Integration test scripts for CloudBioLinux (by Pjotr Prins and Brad Chapman, 2011)\n"
print "BioLinux test frame work running on Ruby "+RUBY_VERSION+"\n"

# find location of test files
path = File.dirname(__FILE__)
$: << path+'/testlib'
require 'test_biolinux'

def run cmd
  print "--> ",cmd
  system(cmd)
end

def error msg
  $stderr.print "FATAL ERROR: ",msg
  exit 1
end

def list_boxes
  print "BioLinux VMs available for testing:\n\n"
  BOX.each do | edition, properties |
    print "* ", edition, " (",properties[:url],")\n"
  end
end

if ARGV.index('--list')
  list_boxes
  exit 0
end

if ARGV.index('-h') or ARGV.index('--help')
  print <<USAGE

    Note this testing framework is under development, and is meant to
    work on Debian-type systems. It requires vagrant, virtualbox, wget,
    md5sum.

  Usage:

    test_vagrant [option] [name]

  Options:

      --continue    Continue install on an already running VM (no VM setup)
      --list        List VMs available for testing
      --help        Print this info
      name          The target test VM name (default is 'Minimal')

  Example:

     cd to VM directory

       cd ~/my_test_vms/

     test Minimal edition - this will pull the remote box to local disk once

       $cloudbiolinux/test/test_vagrant Minimal

     this should pass, but if not (or at interrupt with ^C), start fixing
     with, for example

       cd vm_name
       vagrant ssh

     after a fix, continue where we left off

       $cloudbiolinux/test/test_vagrant Minimal --continue

  The base install vm_name.box will be pulled over the Internet, unless it
  exist in the local directory. On my system the first install run takes
  approx. 10 minutes (including the original image download at 10Mbs), the
  second fresh install run, using a local box, takes 5 minutes, and the
  --continue switch less than half a minute.

  For more information see ./doc/hacking.md

  Available boxes are:

USAGE
  list_boxes
  exit 0
end

srcpath = File.dirname(File.dirname(__FILE__))
print srcpath, "\n"

box_name = ARGV.shift
use_running_vm = false
if box_name == '--continue'
  use_running_vm = true
  box_name = ARGV.shift
end
box_name = 'Minimal' if !box_name # Default
# flavor_name  = ARGV.shift
# flavor_name  = 'Base' if !flavor_name # not used

print "Testing box/VM named '#{box_name}'\n"
raise "Unknown box for #{box_name}" if !BOX[box_name]
remotebox    = BOX[box_name][:url]
localbox     = File.basename(remotebox)
md5box       = BOX[box_name][:md5]
call_test    = BOX[box_name][:call_test]
fabricrc     = srcpath + '/' + BOX[box_name][:fabricrc]
packagelist  = srcpath + '/' + BOX[box_name][:packagelist]

# find or install vagrant
error "Vagrant not installed. Use: gem install vagrant" if `which vagrant` !~ /vagrant/

require 'vagrant'

# Name a temporary dir
testname = box_name+"_BioLinux_"+File.basename(localbox,".box")

if use_running_vm
  print "Continuing on an already running VM #{testname}\n"
else
  # Remove old box, if there
  if File.directory?(testname)
    Dir.chdir(testname) do
      run "vagrant destroy"
    end
  end
  run "vagrant box remove #{testname}"

  if not File.exist?(localbox)
    print "Fetching #{remotebox}\n"
    run "wget #{remotebox}"
  end
  error "Can not download #{remotebox} - is wget installed?" if not File.exist?(localbox)
  `md5sum #{localbox}` =~ /(\w+)/
  error "MD5 sum of #{localbox} does not match expected value #{md5box}" if md5box != $1
  print "MD5 sum of #{localbox} is correct\n"
  print "Starting from local #{localbox}\n"
  run "vagrant box add #{testname} #{localbox}"

  Dir.mkdir(testname) if !File.directory?(testname)
  # Bring VM up
  Dir.chdir(testname) do
    print `ls -l`
    run "vagrant init #{testname}"
  end
end

if not File.directory?(testname)
  error "VM #{testname} appears not to be installed"
end

Dir.chdir(testname) do
  # Always try to start the VM
  run "vagrant up"
end

# Using the VM
Dir.chdir(testname) do
  # Fetch the vagrant ssh key, and store it locally
  # First see if we can copy a file - if we can there is no need to update .ssh/config
  File.unlink('remote_hosts') if File.exists?('remote_hosts')
  run "scp default:/etc/hosts remote_hosts"
  if !File.exist?('remote_hosts')
    run "vagrant ssh-config >> ~/.ssh/config"
    run "scp default:/etc/hosts remote_hosts"
  end
  raise "Problem connecting to remote hosts (using scp)" if !File.exist?('remote_hosts')
  File.unlink('remote_hosts')
  # run "vagrant status"
  print "We can use #{testname}!\n"

  # Fire up the BioLinux fab file - this installs the VM
  run "fab -f #{srcpath}/fabfile.py -H vagrant -c #{fabricrc} install_biolinux:packagelist=#{packagelist},environment=biolinux-test"

  # Now set up Ruby's vagrant access for testing
  vagrant = Vagrant::Environment.new
  raise "Must run `vagrant up`" if !vagrant.primary_vm.created?
  raise "Must be running!" if !vagrant.primary_vm.vm.running?
  vagrant.primary_vm.ssh.execute do |ssh|
    # copy package list
    File.open("dpkg.lst","w").write(ssh.exec!("dpkg -l"))
    # Do we have ruby and tools?
    test_for_match(ssh,"/usr/bin/ruby -v", "ruby")
    test_for_match(ssh,"/usr/bin/rdoc -v", "RDoc")
    test_in_path(ssh,"gem")
    # Make sure Ruby 1.9.1 is in Minimal
    # test_for_match(ssh,"/usr/bin/ruby1.9.1 -v", "1.9")
    # Run flavor/edition specific tests
    eval(call_test+'(vagrant)') if call_test
    if test_for_completed_install(ssh,box_name)
      print <<COMPLETE

  SUCCESS!

  The BioLinux installation test of '#{box_name}' completed successfully!
  You can check the running VM by logging in with:

    cd ./#{testname}
    vagrant ssh

  Enjoy!
COMPLETE
    exit 0
    end
  end
  print <<INCOMPLETE

  FAILURE!

  Somehow the test did not complete.

INCOMPLETE
  exit 1
end


